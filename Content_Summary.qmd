---
title: "GWAS Simulation: Microbial Methane Production"
author: "Nibia"
date: today
format:
  html:
    toc: true
    toc-depth: 2
    embed-resources: true
---

```{r setup, include=FALSE}
#| message: false
library(snpStats)
library(tidyverse)
library(broom)
library(qqman)

# Set seed
set.seed(394)
```


## **üß¨ Intro to Genome-Wide Association Studies üß¨** {.unnumbered .smaller} 
Genome-Wide Association Studies (GWAS) help identify genetic variants linked to traits. In this case, we‚Äôll explore **methane production in microbes** by simulating genetic data.


#### **Key GWAS Words/Concepts** {.unnumbered .smaller} 

- *Genetic variation:* Most of the DNA from organisms of the same species is identical, however the parts where the DNA sequences differ are called genetic variants oe *SNP*.

![SNP](snp-1.jpg)
\
*Society for Mucosal Immunology*

- *Genotype:* The specific DNA sequence of an individual, can refer to alleles or variants.
- *Allele:* One of two or more alternative forms of a gene. 
    - *Homozygous:* Same allele
    - *Heterozygus:* Different alleles
- *Phenotype:* The trait represented as a result of the genotype.

From the introduction

#### **Typical GWAS model looks like this:** {.unnumbered .smaller} 

$$E[\mathbf{y} \mid \mathbf{X}] =\boldsymbol\beta_0 + \boldsymbol\beta_1 \mathbf{X}$$

where:
\
**y** is the trait 
\
**X** is the number of minor alleles

::: {.callout-note}

**Fun fact:** Microbial Genome Associated Studies are often refer to mGWAS in the literature!

For the microbe nerds, this GWAS simulation will not fulfill all our current understanding of prokaryotic DNA and/or the most appropaite data for bacterial DNA. I will be using methods used on human GWAS. However, I wanted to share how bacterial DNA differs from human DNA:

##### **- No Chromosome Pairs:** {.unnumbered .smaller} 

Humans have diploid genomes (two copies of each chromosome, so SNPs are 0, 1, or 2 based on allele copies).
Bacteria are haploid (one circular chromosome), so they only have one allele per locus (0 or 1).

##### **- SNP Representation:** {.unnumbered .smaller} 

In bacteria, a SNP is typically a single base change in a conserved region of the genome (A ‚Üí G, C ‚Üí T, etc.).
Instead of 0, 1, 2 (homozygous reference, heterozygous, homozygous alternative) like in humans, bacterial SNPs are usually binary (present or absent at a given site).

##### **- Horizontal Gene Transfer (HGT):** {.unnumbered .smaller} 

Bacteria can share genetic material through processes like conjugation, transformation, and transduction.
This means that SNPs may spread across different bacterial strains in ways that are different from human inheritance.

##### **- Linkage Disequilibrium (LD) is Different:** {.unnumbered .smaller} 

Because bacteria reproduce asexually (clonal reproduction), SNPs are often highly linked and don't shuffle in the same way as in sexually reproducing species.
    
\\    
Scientist working on mGWAS, reference human GWAS heavily. 
\\ 
In the paper, *Microbial genome-wide association studies: lessons from human GWAS* (2016), they summarized some of the advancement for the time:
\\
- With more microbe genomes available, scientists can now use GWAS to study things like antibiotic resistance and how diseases spread.
\\
- Microbe populations are tricky to study due to their diversity and complex genetics, so better tools are needed to make progress.
\\
- Combining data from both host and microbe genomes could reveal how they interact, opening up exciting new research areas.
\\
>Power, R., Parkhill, J. & de Oliveira, T. Microbial genome-wide association studies: lessons from human GWAS. Nat Rev Genet 18, 41‚Äì50 (2017). https://doi.org/10.1038/nrg.2016.132
\\
Most of the literature that I found covered mGWAS throught the lens of public health microbiology. 
:::

---

## **ü¶† Simulating Microbial Data ü¶†** {.unnumbered .smaller} 

We will generate:
\

1. **1000 microbes** with **random SNPs** (0, 1, 2 copies of a minor allele).
\
2. A binary **"High Methane Producer"** trait influenced by a SNP.


```{r simulate-snps-with-maf}

n <- 1000   # number of microbes
num_snps <- 5  # number of SNPs

# Function to generate SNPs based on minor allele frequency

generate_snp_maf <- function(n, maf, major = "A", minor = "G") {
  allele1 <- ifelse(runif(n) < maf, minor, major)   # generate first allele (major/minor based on MAF) 
  allele2 <- ifelse(runif(n) < maf, minor, major) #  # generate second allele independently
  paste0(allele1, "/", allele2)   # genotype in 
}

# minor allele frequencies
maf_values <- c(0.6, 0.8, 0.2, 0.4, 0.1)  

# create SNP dataset with MAF????
snp_data <- data.frame(
  ID = 1:n,
  SNP1 = generate_snp_maf(n, maf_values[1], "A", "G"),
  SNP2 = generate_snp_maf(n, maf_values[2], "C", "T"),
  SNP3 = generate_snp_maf(n, maf_values[3], "G", "A"),
  SNP4 = generate_snp_maf(n, maf_values[4], "T", "C"),
  SNP5 = generate_snp_maf(n, maf_values[5], "A", "G")
)

# View first few rows
head(snp_data)
```
- *Why do we have two letters in each SNP in Human Genome?*
\
Humans are diploid organisms, meaning we inherit one copy of each chromosome from our mother and one from our father, resulting in two alleles.

## **üìå Converting SNPs to Numeric Genotypes (0, 1, 2) üìå**. {.unnumbered .smaller} 

To analyze GWAS data, we **count the number of minor alleles** per individual. In this example, we will be determining which is the minor allele in this population of microbes.

```{r convert-genotypes-maf}

# SNPs from bases to numbers based on the minor allele numerically
convert_to_numeric <- function(snp, minor_allele) {
  sapply(snp, function(x) sum(unlist(strsplit(x, "/")) == minor_allele)) # count occurrences of the minor allele
}

# determining minor allele in each SNP and assigning it to 
snp_numeric <- snp_data %>%
  mutate(
    SNP1_numeric = convert_to_numeric(SNP1, "G"),
    SNP2_numeric = convert_to_numeric(SNP2, "T"),
    SNP3_numeric = convert_to_numeric(SNP3, "A"),
    SNP4_numeric = convert_to_numeric(SNP4, "C"),
    SNP5_numeric = convert_to_numeric(SNP5, "G")
  ) %>%
  select(ID, ends_with("_numeric"))  
head(snp_numeric)

```
```{r}

#determining SNP associated with trait
n <- nrow(snp_numeric) # calculate the number of individuals 
y <- 3 * snp_numeric[,'SNP2_numeric'] + rnorm(n, 0, 1) # y = 2 * x + e

# look at the first few simulated trait values
head(y)

```

## **üßÆ Part 4: Quality Control üßÆ**

We're not going to be able to detect an association between our trait and any of the SNPs that have a MAF of zero (also known as *monomorphic* SNPs). 

In our case, we stablished the MAFs all to be above O. Therefore we do not need to perform this quality control step.


## **üß¨ Part 5: GWAS Analysis üß¨** {.unnumbered .smaller}

Now that we have numerical genotypes and a simulated trait, we can run a genome-wide association study (GWAS) to test which SNPs are associated with methane production.

### 1Ô∏è‚É£ Running Logistic Regression GWAS

We‚Äôll use logistic regression to test whether each SNP is significantly associated with the high methane producer trait.

```{r}
# y to a binary trait (1 = high methane producer, 0 = low)
y_binary <- as.numeric(y > median(y))  # Median split to define high/low producers

#  logistic regression for each SNP
run_gwas <- function(snp_col) {
  model <- glm(y_binary ~ snp_numeric[[snp_col]], family = binomial) # Logistic regression
  tidy(model) %>% filter(term != "(Intercept)")  # Extract SNP results (skip intercept)
}

gwas_results <- map_dfr(names(snp_numeric)[-1], run_gwas, .id = "SNP") 

gwas_results

```

### 2Ô∏è‚É£ Adjusting for Multiple Testing (Bonferroni)

Because we are testing multiple SNPs, we need to adjust our p-values to reduce false positives.

#### Bonferroni Connection

The significance level is the probability that a given test will incorrectly find a difference in the sample that is not present in the population (false positive). 

$$ 
Bonferroni\ Corrected\ p-value\ =\dfrac{\alpha}{n}
$$
where:

$$\alpha$$ is the original p-value
$$n$$ is the number of tests


```{r}
# Bonferroni correction
gwas_results <- gwas_results %>%
  mutate(p_adj = p.value * nrow(gwas_results)) 

gwas_results %>% 
  arrange(p.value)

```

### 3Ô∏è‚É£ Visualizing GWAS Results

We‚Äôll use a Manhattan plot to visualize SNP associations and a QQ plot to check for inflation of p-values.

```{r}
# prepare for graphing the Manhattan plot
gwas_plot_data <- gwas_results %>%
  mutate(SNP_num = row_number()) 
gwas_plot_data <- gwas_plot_data %>% 
  mutate(log_Pvalue = log(p.value))


ggplot(gwas_plot_data, aes(x= SNP_num, y= -log_Pvalue))+
  geom_point()

# QQ plot 
qqman::qq(gwas_results$p.value, main = "QQ Plot of GWAS p-values")
```
Since we are only working with 5 SNP, our Manhattan plot looks pretty sad. Each SNP belong to a specific location.


